---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'ktnh - Keep Aurora clusters and RDS instances stopped permanently'

Metadata:
  KTNH:
    Generator: '{{ .GeneratorName }}'
    Version: '{{ .GeneratorVersion }}'
    DBIdentifier: '{{ .DBIdentifier }}'
    DBType: '{{ .DBType }}'

Resources:
  StateMachineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'ktnh-sfn-{{ .DBIdentifierShort }}-{{ .Qualifier }}'
      Description: 'Execution role for the ktnh state machine'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 'states.amazonaws.com'
      Policies:
        - PolicyName: 'rds'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'rds:DescribeDB{{ if eq .DBType "aurora" }}Cluster{{ else }}Instance{{ end }}s'
                  - 'rds:StopDB{{ if eq .DBType "aurora" }}Cluster{{ else }}Instance{{ end }}'
                Resource:
                  - !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:{{ if eq .DBType "aurora" }}cluster{{ else }}db{{ end }}:{{ .DBIdentifier }}'
        - PolicyName: 'logs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'logs:PutLogEvents'
                  - 'logs:PutResourcePolicy'
                  - 'logs:DescribeResourcePolicies'
                  - 'logs:DescribeLogGroups'
                Resource: '*'

  StateMachineLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: 'ktnh-sfn-{{ .DBIdentifierShort }}-{{ .Qualifier }}'
      RetentionInDays: 14

  StateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'ktnh-{{ .DBIdentifierShort }}-{{ .Qualifier }}'
      DefinitionString: |-
        {{- if eq .DBType "aurora" }}
        {{-   include "stateMachineAurora" . | indent 8 | printf "\n%s" }}
        {{- else }}
        {{-   include "stateMachineRDS" . | indent 8 | printf "\n%s" }}
        {{- end }}
      RoleArn: !GetAtt 'StateMachineExecutionRole.Arn'
      LoggingConfiguration:
        Level: 'ALL'
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt 'StateMachineLogGroup.Arn'

  EventsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'ktnh-events-{{ .DBIdentifierShort }}-{{ .Qualifier }}'
      Description: 'Role used by EventBridge rule and scheduler to trigger the ktnh state machine'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - 'events.amazonaws.com'
                - 'scheduler.amazonaws.com'
      Policies:
        - PolicyName: 'statemachine'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'states:StartExecution'
                Resource: !GetAtt 'StateMachine.Arn'

  RDSAutoStartEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'ktnh-autostart-{{ .DBIdentifierShort }}-{{ .Qualifier }}'
      Description: 'Rule to capture Aurora cluster or RDS instance auto-start events and trigger Step Functions'
      State: 'ENABLED'
      EventPattern:
        source:
          - 'aws.rds'
        detail-type:
          - 'RDS DB {{ if eq .DBType "aurora" }}Cluster{{ else }}Instance{{ end }} Event'
        detail:
          EventID:
            - 'RDS-EVENT-{{ if eq .DBType "aurora" }}0153{{ else }}0154{{ end }}'
          SourceIdentifier:
            - '{{ .DBIdentifier }}'
      Targets:
        - Id: 'stop'
          Arn: !GetAtt 'StateMachine.Arn'
          RoleArn: !GetAtt 'EventsRole.Arn'
          RetryPolicy:
            MaximumEventAgeInSeconds: 86400
            MaximumRetryAttempts: 185

  PeriodicStopSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Name: 'ktnh-periodicstop-{{ .DBIdentifierShort }}-{{ .Qualifier }}'
      Description: 'Schedule to stop Aurora cluster or RDS instance every 6 hours as a backup mechanism'
      State: 'ENABLED'
      ScheduleExpression: 'rate(6 hours)'
      Target:
        Arn: !GetAtt 'StateMachine.Arn'
        RoleArn: !GetAtt 'EventsRole.Arn'
        RetryPolicy:
          MaximumEventAgeInSeconds: 1800
          MaximumRetryAttempts: 3
      FlexibleTimeWindow:
        Mode: 'OFF'
