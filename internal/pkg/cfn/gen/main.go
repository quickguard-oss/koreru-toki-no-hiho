//go:generate go run ./

package main

import (
	"fmt"
	"os"
	"strings"
)

/*
main generates the internal/pkg/cfn/template_def.go file.
*/
func main() {
	statemachineAuroraContent := readFile("./statemachine.aurora.json")
	statemachineRdsContent := readFile("./statemachine.rds.json")
	cloudformationContent := readFile("./cloudformation.yml")

	code := `// Code generated by gen/main.go; DO NOT EDIT.

package cfn

const templateStr = ` + "`" + `
{{- define "stateMachineAurora" -}}
%s
{{- end -}}

{{- define "stateMachineRDS" -}}
%s
{{- end -}}

{{- define "cloudformation" -}}
%s
{{- end -}}

{{- template "cloudformation" . -}}
` + "`"

	output := fmt.Sprintf(
		code,
		escapeBackticks(statemachineAuroraContent),
		escapeBackticks(statemachineRdsContent),
		escapeBackticks(cloudformationContent),
	)

	writeFile("../template_def.go", output)

	fmt.Println("Successfully generated template_def.go")
}

/*
readFile reads the content of a file at the given path.
If an error occurs during reading, the program will exit.
*/
func readFile(path string) string {
	content, err := os.ReadFile(path)

	if err != nil {
		fmt.Fprintf(os.Stderr, "Error reading %s: %v\n", path, err)

		os.Exit(1)
	}

	return string(content)
}

/*
writeFile writes data to a file at the given path.
If an error occurs during writing, the program will exit.
*/
func writeFile(path string, data string) {
	err := os.WriteFile(path, []byte(data), 0644)

	if err != nil {
		fmt.Fprintf(os.Stderr, "Error writing %s: %v\n", path, err)

		os.Exit(1)
	}
}

/*
escapeBackticks replaces backtick characters in the input string
with an escaped representation suitable for embedding in Go string literals.
*/
func escapeBackticks(s string) string {
	return strings.ReplaceAll(
		s,
		"`",
		"` + \"`\" + `",
	)
}
